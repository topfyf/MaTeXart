% *** matexart ***
% A package with useful macros and environments for math papers.
%
% Copyright (C) 2023 OrthoPole
%
% * This program is free software: you can redistribute it and/or
% * modify it under the terms of the GNU General Public License
% * as published by the Free Software Foundation, either version 3
% * of the License, or (at your option) any later version.
% *
% * This program is distributed in the hope that it will be useful,
% * but WITHOUT ANY WARRANTY; without even the implied warranty of
% * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
% *
% * GNU General Public License for more details.
% * You should have received a copy of the GNU General Public License
% * along with this program. If not, see <https://www.gnu.org/licenses/>.
%
%
% This package is currently a set of macros of math tools
% and also defines useful commands to help create numbered
% environments more efficiently and gracefully.
%
% Name: MaTeXart
% Version: 1.0.0
% Date: 2023/04/12
% Author: OrthoPole (https://github.com/topfyf)
%

\def\packagename{MaTeXart}
\def\packagever{1.0.0}
\def\packagedate{2023/04/12}

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{matexart}[\packagedate\space\packagename\space\packagever]


%%% import packages %%%

% pacakges for typesetting
\RequirePackage[margin=1in]{geometry}
\RequirePackage[inline]{enumitem}
\RequirePackage[normalem]{ulem}
\RequirePackage{color, caption, graphicx, subfigure}
\RequirePackage[pdfstartview=FitH, CJKbookmarks=true,
    bookmarksnumbered=true, bookmarksopen=true,
    colorlinks, linkcolor=black, anchorcolor=black,
    citecolor=black]{hyperref}

% pacakges for math formula
\RequirePackage{amsmath, amssymb, amsthm, amsfonts}
\RequirePackage{mathrsfs, extarrows, bbm, bm}
\RequirePackage{commutative-diagrams, quiver}
\RequirePackage[new]{old-arrows}
\RequirePackage{cleveref}


%%% useful macros %%%

% ** \mat@def#1 **
% Description: define macros with no parameter by <control sequence> -> <replacement text>
% Example:
% * \mat@def{
% *     \foo -> mate;   % \def\foo{mate}
% *     \bar -> xart;   % \def\bar{xart}
% * }
% * \foo\bar            % output "matexart"
\long\def\mat@def#1{\mat@def@A#1@}
\def\mat@def@A{\futurelet\next\mat@def@B}
\def\mat@def@B{\mat@ifempty\next \expandafter\mat@def@C \else \expandafter\mat@def@D \fi}
\def\mat@def@C{\afterassignment\mat@def@A \let\next= }
\def\mat@def@D{\ifx @\next \expandafter\mat@def@E \else \expandafter\mat@def@ \fi}
\def\mat@def@E{\let\next= }
\def\mat@def@#1-> #2;{\def#1{#2}\mat@def@A}
\long\def\mat@ifempty#1{\expandafter\ifx\space#1 \mat@emptytrue \else\ifx\par#1 \mat@emptytrue \else \mat@emptyfalse \fi\fi \ifmat@empty}
\newif\ifmat@empty


%%% Declare Options %%%

% whether \matdef is allowed
% default: allowed
\def\enablematdef{\let\matdef=\mat@def}
\def\disablematdef{\let\matdef=\undefined}
\DeclareOption{enable-matdef}{\enablematdef}
\DeclareOption{disable-matdef}{\disablematdef}

% default options
\ExecuteOptions{enable-matdef}
\ProcessOptions\relax


\endinput
